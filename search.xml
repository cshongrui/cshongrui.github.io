<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>唯物论之意识观</title>
      <link href="/p/%E6%84%8F%E8%AF%86%E8%A7%82/"/>
      <url>/p/%E6%84%8F%E8%AF%86%E8%A7%82/</url>
      
        <content type="html"><![CDATA[<h1>辩证唯物论-意识观</h1><p><strong><code>对于实践的理解：</code></strong></p><p><img src="https://i.loli.net/2021/10/21/9Ywb5iHRclryPBT.png" alt="2021-10-21_213034.png"></p><blockquote><p><strong><code>意识观：</code></strong></p><ol><li>意识的起源</li><li>意识的本质</li><li>意识的作用</li><li>意识与物质的辩证关系</li></ol></blockquote><p><img src="https://i.loli.net/2021/10/22/Fh5yY32KObPnRmV.png" alt="2021-10-21_222113.png"></p><p><img src="https://i.loli.net/2021/10/22/TNoHe12pBQL6ysr.png" alt="2021-10-22_104230.png"></p><p><img src="https://i.loli.net/2021/10/22/GDef2AMEtsxorHW.png" alt="2021-10-22_125511.png"></p>]]></content>
      
      
      <categories>
          
          <category> 政治 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 马克思主义基本原理 </tag>
            
            <tag> 马克思主义哲学 </tag>
            
            <tag> 唯物论 </tag>
            
            <tag> 徐涛政治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DNS选择大全</title>
      <link href="/p/DNS%E9%80%89%E6%8B%A9%E5%A4%A7%E5%85%A8/"/>
      <url>/p/DNS%E9%80%89%E6%8B%A9%E5%A4%A7%E5%85%A8/</url>
      
        <content type="html"><![CDATA[<h1>什么是DNS?</h1><p>打个比方，你电脑是你家，你家地址是一个IP，你要拜访百度的家，那肯定要知道百度家在哪里，<a href="http://xn--baidu-r52hl43vr3yb.com">你知道baidu.com</a>，但是电脑访问的是网络地址，是数字，其它的他都不认识，百度家IP是220.181.38.148，但是你记不住，你电脑也不知道，那么你肯定要找备忘录啊，这时候，你电脑里有一个Hosts文件，这个文件是你的备忘录，然而你备忘录里什么都没写，这时候怎么办呢？是不是要去问？去哪问呢？打电话114去问，114就是报局，里面什么都有，然后你问到了百度家的地址，接下来电脑就能顺着网线去找了。而这个114，就是DNS。</p><p>DNS所在服务器的配置，决定了它的的快和慢，但不管怎样，它都会为你指定一个方向，就算是它找不到，他也会问他的上一级服务器要，但这就增加了查询时间，然后你就会觉得慢。DNS服务器是一个常年开着的服务器，做一个的指路人，是需要很大代价的，比如服务器费、电费，然后一旦是名声好的DNS，大家都会去用，所以负担也会比较大，这个时候一台DNS服务器的配置怎么样就体现出来了，因此，免费的DNS不是很多（但也不少）。</p><p>DNS能为你指明路，但也能暗中坑你一把，还能把你指到沟里去，这取决于你访问的DNS是否“善良”，有的DNS会雁过拔毛，顺走你的信息或者给你塞一张网页广告弹窗传单，这就是叫DNS污染，有的DNS会把你指向另一个地方，这就是DNS劫持。</p><p>DNS污染或者DNS劫持，经常会导致上网的时候，原本没有广告弹窗的网页，蹦出各种奇奇怪怪的广告页面，甚至会跳转到其它网页里去，有时候还会有钓鱼诈骗，导致用户信息泄露，损失财产。还有就是QQ可以正常登录、游戏也可以正常玩，但是网页无论如何都打不开。（QQ自带有自己的安全DNS，所以不受影响）（纠正：QQ是内置设定了直连腾讯服务器IP，不需要通过DNS查找自己家的服务器IP地址）希望大家可以手动设置一下自己的网络DNS。电脑的，路由器的，甚至是手机的都可以设置一下。设置方法是打开电脑或者路由器的网络设置，然后找到DNS来填写你想要的。</p><h1>常用DNS</h1><blockquote><p>以下是可以使用的纯净快速DNS，左边为主DNS，右边为备用DNS。</p></blockquote><ul><li>国内通用的114DNS：114.114.114.114和114.114.115.115（114.114.114.119和114.114.115.119在前面基础上还可拦截钓鱼病毒木马网站、增强网银、证券、购物、游戏、隐私信息安全的）（114.114.114.110和114.114.115.110在前面基础上还可拦截色情网站，保护少年儿童免受网络色情内容的毒害）</li><li>全球通用的谷歌DNS：8.8.8.8和8.8.4.4</li><li>阿里提供的：223.5.5.5和223.6.6.6</li><li>百度提供的：180.76.76.76</li><li>DNSPod DNS（有一说法讲这个是腾讯）提供的：119.29.29.29和182.254.116.116</li><li>电信：101.226.4.6和218.30.118.6</li><li>联通/移动/铁通：123.128.81.6和140.207.198.6</li><li>CNNIC SDNS提供的：1.2.4.8和210.2.4.8</li><li>oneDNS提供的：117.50.11.11和52.80.66.66</li><li>电信/移动/铁通：101.226.4.6和218.30.118.6</li><li>联通：123.125.81.6和140.207.198.6</li><li>美国的跨国科技企业Cloudflare号称速度最快的：1.1.1.1和1.0.0.1</li><li>美国IBM的提供的Quad9：9.9.9.9</li><li>Free Public DNS Resolver Project（提供的：185.222.222.222和185.184.222.222）</li><li>免费的域名解析服务提供商OpenDNS的：208.67.222.222和208.67.220.220</li><li>V2EX社区提供的DNS：199.91.73.222和178.79.131.110</li><li>中国互联网络信息中心的：1.2.4.8和210.2.4.8</li></ul><blockquote><p>转载自：<a href="https://www.zhihu.com/question/34826522%EF%BC%8C%E5%A6%82%E6%9C%89%E4%BE%B5%E6%9D%83%EF%BC%8C%E8%AF%B7%E8%81%94%E7%B3%BB%E7%AB%99%E4%B8%BB%E5%8F%8A%E6%97%B6%E5%88%A0%E9%99%A4%E3%80%82">https://www.zhihu.com/question/34826522，如有侵权，请联系站主及时删除。</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 碎片化知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《末代皇帝》影评</title>
      <link href="/p/%E3%80%8A%E6%9C%AB%E4%BB%A3%E7%9A%87%E5%B8%9D%E3%80%8B%E5%BD%B1%E8%AF%84/"/>
      <url>/p/%E3%80%8A%E6%9C%AB%E4%BB%A3%E7%9A%87%E5%B8%9D%E3%80%8B%E5%BD%B1%E8%AF%84/</url>
      
        <content type="html"><![CDATA[<h1>《末代皇帝》</h1>]]></content>
      
      
      <categories>
          
          <category> 影评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电影 </tag>
            
            <tag> 观后感 </tag>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>markdown开启内联公式模式</title>
      <link href="/p/markdown%E5%BC%80%E5%90%AF%E5%86%85%E8%81%94%E5%85%AC%E5%BC%8F%E6%A8%A1%E5%BC%8F/"/>
      <url>/p/markdown%E5%BC%80%E5%90%AF%E5%86%85%E8%81%94%E5%85%AC%E5%BC%8F%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="插入行间公式">插入行间公式</h2><ol><li>打开Typora，点击“段落”—&gt;“公式块”</li><li>快捷键 Ctrl+Shift+m</li><li>“$$”+回车</li></ol><h2 id="插入行内公式">插入行内公式</h2><p>直接在相应位置输入 两个 $ ，然后中间就是自己想输入的公式</p><p>如果不成功的话，那就确认下下面这个问题：<br>想要插入行间公式，首先需要确认以下，Typora已经勾选 “插入内联公式” 选项。<br>具体方法：<br>点击“文件” --&gt; “偏好设置” --&gt; “Markdown” --&gt; “Markdown扩展语法” —&gt; 勾选 “内联公式”<br>然后重启Typora,再次打开就可以继续使用了。</p><p><code>更多markdown使用方法请点击链接</code>：<a href="https://blog.csdn.net/qq_33934427/article/details/107091142">https://blog.csdn.net/qq_33934427/article/details/107091142</a></p>]]></content>
      
      
      <categories>
          
          <category> 碎片化知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性表</title>
      <link href="/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
      <url>/p/%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1>第2章 线性表</h1><h2 id="2-1-线性表的定义和基本操作">2.1 线性表的定义和基本操作</h2><h3 id="2-1-1-线性表的定义">2.1.1 线性表的定义</h3><img src="https://i.loli.net/2021/09/01/kcGW7iaevwzmD6t.png" style="zoom:70%;" /><p>线性表占据数据结构三元素其中之二（<code>逻辑结构</code>、<code>数据的运算</code>），所以算是<code>抽象数据类型ADT</code>（Abstract Data Type)，而不算一个完整的数据结构。</p><p><code>存储结构不同，运算的实现方式不同（在物理上用不同的方式来实现运算）</code></p><blockquote><p>线性表定义 ：</p><p>​具有<code>相同</code>数据类型的n（n ≥ 0）个数据元素的<code>有限序列</code>，其中n为表长，当n = 0 时线性表是一个空表。若用L命名线性表，则其一般表示为 L = (a<sub>1</sub> , a<sub>2</sub> , a<sub>i</sub> , a<sub>i+1</sub> , … , a<sub>n</sub>)</p></blockquote><p>tips:</p><p>​相同：代表每个数据元素所占空间一样大；</p><p>​有限：代表线性表内数据元素的个数是有限的（有具体个数的）</p><p>​序列：代表数据元素是有次序，按照某一规则排序（例如按从大到小或从小到大排序）</p><p><img src="https://i.loli.net/2021/09/01/JstKB9E4LG1FZhA.png" alt=""></p><blockquote><p>线性表的几个概念：</p><p>​a<sub>i</sub> 是线性表中的 “第i个” 元素线性表中的位序</p><p><code>（当我们用数组存数据元素，这时数组下标是从0开始的，而位序是从1开始的，一定要注意这点，在取值时下标不要搞错了）</code></p><p>​a<sub>1</sub> 是表头元素；a<sub>n</sub> 是表尾元素</p><p>​除第一个元素外，每个元素都有且仅有一个直接前驱；除了最后一个元素外，每个元素有且仅有一个直接后继</p></blockquote><h3 id="2-1-2-线性表的基本操作">2.1.2 线性表的基本操作</h3><blockquote><p>线性表的基本操作：</p><p>​<code>概括为：新建、销毁，增删查改</code></p><p>​新建表：InitList(&amp;L) ------&gt;  <code>初始化</code>操作，构造一个空的线性表L，分配内存空间</p><p>​销毁表：DestroyList(&amp;L) ------&gt; <code>销毁</code>操作，销毁线性表，并<code>释放</code> 线性表L所占用的内存空间</p><p>​插入：ListInsert(&amp;L, i, e) ------&gt; <code>插入</code>操作，在表L中的第i个位置上插入指定元素e</p><p>​删除：ListDelete(&amp;L, i, &amp;e) ------&gt; <code>删除</code>操作，删除表中的第i个位置的元素，并用e返回删除元素的值</p><p>​查找有两种：</p><p>​按<code>值</code>查找： LocateElem(L, e) ------&gt; 在表L中查找具有给定关键字值的元素</p><p>​按<code>位</code>查找： GetElem(L, i) ------&gt; 获取表L中第i个位置的元素的值</p><p>​改：就是先查找到元素，再进行上述插入或删除的操作</p></blockquote><p>​其他常用操作：</p><p>​Length(L)：求表长。返回线性表L的长度，即L中数据元素的个数</p><p>​PrintList(L)：输出表。按前后顺序输出线性表L的所有元素值。</p><p>​Empty(L)：判空操作。若线性表L为空表，则返回true，否则返回false。</p><p><code>引用&amp;</code>：C++语言符号，在传参时直接把被调函数中的运算结果带回，而不需要像C语言一样传地址，再解引用带回被调函数运算结果，举例如下：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> &amp;a)</span>  <span class="comment">//c语言：void test(int* a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">10</span>;       <span class="comment">//c语言：*a = 10;</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;被调函数内 a = %d\n&quot;</span>, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;调用test函数前 a = %d\n&quot;</span>, a);</span><br><span class="line">test(a);    <span class="comment">//c语言：test(&amp;a);</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;调用test函数后 a = %d\n&quot;</span>, a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>本小节思维导图</strong>：</p><p><img src="https://i.loli.net/2021/09/01/8lfKMELUDsHVZ4j.png" alt="2021-09-01_203307.png"></p><h2 id="2-2-线性表的顺序表示">2.2 线性表的顺序表示</h2><h3 id="2-2-1-顺序表的定义">2.2.1 顺序表的定义</h3><ul><li><p>顺序表（是一个完整的数据结构） ------&gt; 线性表(<code>逻辑结构</code>) + 顺序存储(<code>存储结构</code>) +运算：用<code>顺序存储</code>的方式<code>实现</code> <code>线性表</code>顺序存储。即把逻辑上相邻的数据元素存储再物理位置上也相邻的存储单元上，元素之间的关系有存储单元的邻接关系来体现。</p><p>ps：由于顺序表每一个元素类型相同，占据存储空间相等，且在物理上<strong>连续</strong>，所以能推导出每一个元素的地址</p><p>例如：顺序表K的首地址为Loc_first，用sizeof（ElemType)算得一个元素所占空间大小，则第二个元素的地址为        Loc_first + sizeof(ElemType)，依此类推第n个元素的地址为 Loc_first + (n - 1)*sizeof(ElemType)</p></li><li><p>顺序表的实现：一维数组可以静态分配，也可以动态分配（都是连续的空间）</p><ol><li><p>静态分配</p><p>所谓静态分配就是一旦定义，就不能改变定义时所规定的长度和大小。例如，使用数组来建顺序表，这个数组的大小和长度一旦确定，在空间已占满，还要插入新数据时，就会出现溢出错误。</p></li><li><p>动态分配</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10      <span class="comment">//顺序表的初始长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *data;      <span class="comment">//指向动态分配数组的指针</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;<span class="comment">//顺序表最大容量</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//动态分配数组顺序表的类型定义</span></span><br></pre></td></tr></table></figure><p>malloc与free函数：malloc用来动态申请内存空间，free用来释放内存空间</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">L.data = (ElemType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ElemType) * InitSize);</span><br><span class="line"><span class="comment">//malloc返回一个空类型指针，为了匹配定义的数据类型，要进行强制转换，转成对应数据类型的指针</span></span><br></pre></td></tr></table></figure><ul><li><p>具体实现代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> InitSize 10     <span class="comment">//默认最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">  <span class="keyword">int</span> *data;           <span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">  <span class="keyword">int</span> MaxSize;         <span class="comment">//顺序表最大容量</span></span><br><span class="line">  <span class="keyword">int</span> length;          <span class="comment">//顺序表当前长度</span></span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(SeqList &amp;L)</span></span>&#123;</span><br><span class="line">  <span class="comment">//用malloc申请一片连续的存储空间</span></span><br><span class="line">  L.data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>(InitSize * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  L.MaxSize = InitSize;</span><br><span class="line">  L.length  = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加动态数组的长度</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IncreaseSize</span><span class="params">(SeqList &amp;L, <span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> *p = L.data;</span><br><span class="line">  L.data = (<span class="keyword">int</span>*)<span class="built_in">malloc</span>((L.MaxSize+len) * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">  &#123;</span><br><span class="line">    L.data[i] = p[i];</span><br><span class="line">  &#125;</span><br><span class="line">  L.MaxSize = L.MaxSize + len;</span><br><span class="line">  <span class="built_in">free</span>(p);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SeqList L;</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">//... 往顺序表中随便插入几个元素</span></span><br><span class="line">    IncreaseSize(L,<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ol></li><li><p>顺序表的特点：</p><ol><li>随机访问，即可以在O(1)时间内找到第i个元素。</li><li>存储密度高，每个节点只存储数据元素(不像链式存储还要存储指针)</li><li>拓展容量不方便（即便采用动态分配的方式实现，拓展长度的时间复杂度也比较高）</li><li>插入、删除操作不方便，需要移动大量元素</li></ol></li></ul><p><strong>本小节思维导图</strong>：</p><p><img src="https://i.loli.net/2021/09/02/kFMLXqgJA5rDEfv.png" alt="2021-09-02_130930.png"></p><h3 id="2-2-2-顺序表上基本操作的实现用存储位置的相邻来体现数据元素之间的逻辑关系">2.2.2 顺序表上基本操作的实现<code>用存储位置的相邻来体现数据元素之间的逻辑关系</code></h3><ul><li><p>插入</p><p>在逻辑结构上，数据元素“有头有尾”依次按序排列，当我们要在原本的序列中插入一个新的元素时，只需将要插入的<strong>第i个位置</strong> (位序）及其后续的位置上的元素一起往后移一位，新数据元素就被插入到了第i个位置。</p><img src="https://i.loli.net/2021/09/02/eCMTLEnWdhPSZV3.png" alt="2021-09-02_162159.png" style="zoom:60%;" /><p>代码实现：(以静态分配实现，动态分配同理)</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10    <span class="comment">//定义最大长度</span></span></span><br><span class="line"><span class="keyword">typedef</span>  <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];   <span class="comment">//用“静态数组”存放数据元素</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList;<span class="comment">//顺序表的类型定义</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span>   <span class="comment">//将第i个元素及之后的元素后移</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = L.length; j &gt;= i, j--)    <span class="comment">//从数组内元素最后一个开始依次往后移一位</span></span><br><span class="line">    L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e（此时数组下标为i-1）</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList L;<span class="comment">//声明一个顺序表</span></span><br><span class="line">    InitList L;<span class="comment">//初始顺序表</span></span><br><span class="line">    <span class="comment">// ...此处省略插入元素的代码</span></span><br><span class="line">    InitInsert(L, <span class="number">3</span>, <span class="number">3</span>);       <span class="comment">//在顺序表L的第3个位置插入数据元素3</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要考虑代码的健壮性：在输入有误时，要有一个反馈</p><p>针对上述代码改进：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span>   <span class="comment">//将第i个元素及之后的元素后移</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> &amp;&amp; i &gt; L.length + <span class="number">1</span>)          <span class="comment">//判断i是否有效</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= MaxSize)               <span class="comment">//当前存储已满，不能插入。关注这里的大于号，看下图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = L.length; j &gt;= i, j--)    <span class="comment">//从数组内元素最后一个开始依次往后移一位</span></span><br><span class="line">    L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e（此时数组下标为i-1）</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line"><span class="keyword">return</span> ture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>if(L.length &gt;= MaxSize)               //关注这里的大于号，看下图</code></p><img src="https://i.loli.net/2021/09/02/L47haxNgeWKVd1o.png" style="zoom: 45%;" /></li><li><p>插入操作的时间复杂度（问题规模n = L.length 表长）</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> e)</span>   <span class="comment">//将第i个元素及之后的元素后移</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> &amp;&amp; i &gt; L.length + <span class="number">1</span>)          <span class="comment">//判断i是否有效</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= MaxSize)               <span class="comment">//当前存储已满，不能插入。关注这里的大于号，看下图</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = L.length; j &gt;= i, j--)    <span class="comment">//从数组内元素最后一个开始依次往后移一位</span></span><br><span class="line">    L.data[j] = L.data[j - <span class="number">1</span>];</span><br><span class="line">    L.data[i - <span class="number">1</span>] = e; <span class="comment">//在位置i处放入e（此时数组下标为i-1）</span></span><br><span class="line">    L.length++; <span class="comment">//长度加1</span></span><br><span class="line"><span class="keyword">return</span> ture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">L.data[j] = L.data[j - <span class="number">1</span>];      <span class="comment">//关注这句代码运行的次数来求时间复杂度</span></span><br></pre></td></tr></table></figure><p>有三种时间复杂度：</p><ol><li><p>最好时间复杂度：当要插入元素插入位置恰好是表尾时，其他元素不需要移动位置，i = n + 1，循环0次，此时时间复杂度是O(1)。</p></li><li><p>最坏时间复杂度：当要插入元素插入位置恰好是表头时，表内原有的所有元素都要向后移一位， i = i，循环n次，此时时间复杂度是O(n)。</p></li><li><p>平均时间复杂度：假设新元素插入到任何一个位置的概率相同，即 i = 1, 2, 3, … , length + 1 的概率都是 p = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，</p><p>当 i = 1时， 循环n次；当 i = 2时， 循环n - 1次；当 i = 3时， 循环n - 2次 … 当 i = n + 1时，循环0次。</p><p>平均循环次数 = np + (n -1)p +(n -2)p + … + 1·p =<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n+1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.2484389999999999em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span> = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，平均时间复杂度 = O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mi>n</mi><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.040392em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)，化简得O(n)。</p></li></ol></li><li><p>删除</p><p>同理，插入时是插入的指定位置及指定位置之后的原有元素向后移一位，删除时是删除指定位置的原有元素并使指定位置位置之后的原有元素向前移一位，length的值减1。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(SqList &amp;L, <span class="keyword">int</span> i, <span class="keyword">int</span> &amp;e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; L.length; j++)     <span class="comment">//这里的判断条件没有取等于号是因为，删除的如果是最后一个元素，那么</span></span><br><span class="line">    &#123;  <span class="comment">//就不用使删除元素后的原有元素向前移一位。会造成将数组外的数据添加</span></span><br><span class="line">        L.data[j - <span class="number">1</span>] = L.data[j];  <span class="comment">//到数组最后一位（应该算数据溢出吧？）</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.length--;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    SqList(L);</span><br><span class="line">    InitList(L);</span><br><span class="line">    <span class="comment">//...此处省略一些代码，插入几个元素</span></span><br><span class="line">    <span class="keyword">int</span> e = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ListDelete(L, <span class="number">3</span>, e))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;已删除第3个元素，删除元素的值为=%d\n&quot;</span>, e);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位序i不合法，删除失败\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结：在for循环内，当插入时，把元素依次往后移一位，是先移动后面的元素再移动前面的元素；当删除时，把元素依次往前移一位，是先移动前面的元素再移动后面的元素</p><img src="https://i.loli.net/2021/09/03/jmDkTw73uMoISzE.png" alt="2021-09-03_100529.png" style="zoom:100%;" /></li><li><p>删除操作的时间复杂度</p><p>有三种时间复杂度：</p><ol><li>最好时间复杂度：删除表尾元素，不需要移动其他元素，i = n，循环0次；此时时间复杂度为O(1)。</li><li>最坏时间复杂度：删除表头元素，需要将后续的n - 1个元素全部向前移动，i = 1，循环n - 1次；此时时间复杂度为O(n)。</li><li>平均时间复杂度：假设删除任何一个元素的概率相同，即1，2，3，…，length的概率都是p =<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。i = 1，循环n - 1次；i = 2，循环n -2次；… i = n，循环0次，平均循环次数 = (n -1)p + (n-2)p +…+ 1·p = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n -1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>=<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n-1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>。</li></ol></li></ul><p><strong>本小节思维导图</strong>：</p><p><img src="https://i.loli.net/2021/09/03/pDjsMJnH4Ihu1mA.png" alt="2021-09-03_112555.png"></p><ul><li><p>顺序表的查找</p><ul><li><p>按位查找</p><p>GetElem(L, i)：获取表L中第i个位置的元素的值。</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ElemType data[MaxSize];<span class="comment">//静态分配</span></span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SqList;</span><br><span class="line"></span><br><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(Sqlist L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;位序有误，请重新输入\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> L.data[i - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/09/03/PaXwqT43QNzC7yV.png" alt="2021-09-03_120700.png" style="zoom:67%;" /> <img src="https://i.loli.net/2021/09/03/zFC8jZvukcrmMYJ.png" alt="2021-09-03_120744.png" style="zoom:67%;" />   <img src="https://i.loli.net/2021/09/03/mYXd5xrB97qlKcS.png" alt="2021-09-03_120819.png" style="zoom:67%;" /></p></li><li><p>按位查找时间复杂度</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function">ElemType <span class="title">GetElem</span><span class="params">(Sqlist L, <span class="keyword">int</span> i)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> L.data[i - <span class="number">1</span>];        <span class="comment">//无循环，无递归调用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>时间复杂度为O(1)。</p><p>特性：随机存取----&gt; 由于顺序表的各个数据元素在内存中连续存放，因此可以根据起始地址和数据元素的大小立即找到第 i 个元素。</p></li><li><p>按值查找</p><p>LocateElem(L, e)：在表L中查找具有给定关键字值的元素。</p><p>代码实现：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">ElemType *data;</span><br><span class="line">    <span class="keyword">int</span> MaxSize;</span><br><span class="line">    <span class="keyword">int</span> length;</span><br><span class="line">&#125;SeqList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在顺序表L中查找第一个元素值等于e的元素，并返回其位序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SeqList L, ElemType e)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; L.length; i++)</span><br><span class="line">        <span class="keyword">if</span>(L.data[i] == e)</span><br><span class="line">            <span class="keyword">return</span> i + <span class="number">1</span>;     <span class="comment">//数组下标为i的元素值等于e, 返回其位序i+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>==</code>：当两个结构体比较是否相等时，要比较结构体内各分量是否相等（例如：L.num == K.num)。</p></li><li><p>按值查找的时间复杂度</p><p>最好时间复杂度：目标元素在表头时，循环1次，为O(1)。</p><p>最坏时间复杂度：目标元素在表尾时，循环n次，为O(n)。</p><p>平均时间复杂度：假设目标元素在表内任意位置的概率相等为p = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，目标元素在第1位，循环1次；在第2位，循环两次；…；在第n位，循环n次；所以平均时间复杂度 = 1·p + 2·p + 3·p + 4·p + … + np = <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo stretchy="false">(</mo><mi>n</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n(n+1)}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.355em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.485em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mopen mtight">(</span><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mn>1</mn><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex">\frac{1}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>=O(<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>n</mi><mo>+</mo><mn>1</mn></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">\frac{n+1}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.190108em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.845108em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>)，化简得O(n)。</p></li></ul></li></ul><p><strong>本小节思维导图</strong>：</p><p><img src="https://i.loli.net/2021/09/03/72lZsY4gROumKfj.png" alt="2021-09-03_164252.png"></p><h2 id="2-3-线性表的链式表示">2.3 线性表的链式表示</h2><h3 id="2-3-1-单链表的定义">2.3.1 单链表的定义</h3><blockquote><p>线性表的链式存储实现方式之一又称单链表。<br>单链表为了建立数据元素之间的线性关系，每个结点除了存放数据元素外，还要存储指向下一个结点的指针（单链表结点内只包含一个指针）<br>单链表在查找目标元素时，需要从头至尾依次遍历直到找到目标元素（为什么要依次遍历而不是直接存取？因为单链表只有知道指向目标元素的指针才能找到目标元素，所以无法查找任意位序的元素，只能从头至尾遍历，像玩游戏一样，打通一关才能到下一关）</p></blockquote><ul><li><p>顺序表和单链表的优劣对比<br><img src="https://i.loli.net/2021/09/30/WIXbsUJPenKBVFq.jpg" alt="D4FE443D-DE45-468D-B5C7-60D3AAD15DA2.jpeg"></p></li><li><p>用代码定义一个单链表</p></li></ul><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型，LNode是结点</span></span><br><span class="line">ElemType data;<span class="comment">//每个结点存放一个数据元素，data是数据域</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个结点，*next是指针域</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">p</span> =</span> (struct LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(struct LNode));  <span class="comment">//增加一个新的结点：在内存中用malloc申请一个结点所需的空间</span></span><br><span class="line">                           <span class="comment">//并用指针p指向这个结点</span></span><br></pre></td></tr></table></figure><ul><li><p>typedef关键字——数据类型重命名<br>typedef &lt;数据类型&gt; &lt;别名&gt;<br>例如：typedef int zhengxing，就是将整型变量int重新命名为zhengxing，如果定义一个整型变量就可以用“zhengxing a；”这行代码代替。</p><p><img src="https://i.loli.net/2021/09/30/aiug4B17nrFIyjb.jpg" alt="4841B99C-C81F-4A71-8726-622A1C603214.jpeg"></p><p><img src="https://i.loli.net/2021/09/30/e1ZoaxR5hKGVijW.jpg" alt="7F597101-E90B-4910-A06E-A724A638716E.jpeg"><br><strong>注意</strong>：写代码要在见名知义的前提下，对命名所代表的东西有所强调，强调指代对象。</p></li><li><p>初始化单链表</p><ul><li>不带头结点的单链表<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型</span></span><br><span class="line">ElemType data;<span class="comment">//每个结点存放一个数据元素</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个结点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个空的单链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;<span class="comment">//这里的“&amp;”不是c的取地址，而是c++的引用</span></span><br><span class="line">L = <span class="literal">NULL</span>;<span class="comment">//空表，暂时还没有任何结点，防止脏数据</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*  //判断链表是否为空</span></span><br><span class="line"><span class="comment">bool Empty(LinkList L)&#123;</span></span><br><span class="line"><span class="comment">if(L == NULL)</span></span><br><span class="line"><span class="comment">return turn;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">或者：bool Empty(LinkList L)&#123;</span></span><br><span class="line"><span class="comment"> return(L == NULL);</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">LinkList L;  <span class="comment">//声明一个指向单链表的指针,此处并没有创建一个结点</span></span><br><span class="line"><span class="comment">//初始化一个空表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);</span><br><span class="line"><span class="comment">//......后续代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>带头结点的单链表<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">ElemType data;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"><span class="comment">//初始化一个单链表（带头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));   <span class="comment">//分配一个头结点</span></span><br><span class="line"><span class="keyword">if</span>(L == <span class="literal">NULL</span>)    <span class="comment">//内存不足，分配失败</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">L-&gt;next = <span class="literal">NULL</span>;    <span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>；</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* //判断单链表是否为空（带头结点）</span></span><br><span class="line"><span class="comment">bool Empty(LinkList L)&#123;</span></span><br><span class="line"><span class="comment">if(L-&gt;next == NULL)</span></span><br><span class="line"><span class="comment">return true;</span></span><br><span class="line"><span class="comment">else</span></span><br><span class="line"><span class="comment">return false;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> <span class="built_in">test</span>()&#123;</span><br><span class="line">LinkList L;    <span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line"><span class="comment">//初始化一个空表</span></span><br><span class="line"><span class="built_in">InitList</span>(L);</span><br><span class="line"><span class="comment">//.....后续代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><center><img src="https://i.loli.net/2021/10/01/m2erHnyaEQk8DOX.jpg" style="zoom: 50%;" align =left></center><center><img src="https://i.loli.net/2021/09/30/Y5kBNHSsrbpuOzZ.png" style="zoom: 50%;"></center></li></ul></li></ul><p><strong>本小节思维导图</strong>：</p><p><img src="https://i.loli.net/2021/10/01/ohWVkl8xR6CBJcL.jpg" alt="C9E2161D-B19F-4F57-90E9-48C130EEDEA4.jpeg"></p><h3 id="2-3-2-单链表上基本操作的实现">2.3.2 单链表上基本操作的实现</h3><ul><li><p>单链表的插入删除</p><ul><li><p>插入</p><ul><li><p>按位序插入（带头结点）</p><p>a. 思路</p><p>ListInsert(&amp;L, i, e)：插入操作。在表L中的<strong>第i个位置</strong>（找到第i-1个结点，将新结点插入其后）上插入指定元素e。</p><p><img src="https://i.loli.net/2021/10/02/cwlU5nieEX8S9vf.png" alt="2021-10-02_155051.png"></p><blockquote><p><strong>i</strong>代表==位序==，我们假设出了一个所谓的“==第0个结点==”的==头结点==，而实际单链表存放的是后面<strong>a<sub>1</sub><strong>到</strong>a<sub>n</sub><strong>的结点，这些结点的位序编号是从</strong>1</strong>开始的，所以当我们插入结点时要保证插入位置的位序是<strong>1至n+1</strong>，即表头、表中、表尾。</p></blockquote><p>b. 具体代码实现</p><p><strong>插在表头：</strong></p><p><img src="https://i.loli.net/2021/10/02/4lHoXr6jpqYtwAz.png" alt="2021-10-02_161711.png"></p><p>==注：==如果绿色箭头与黄色箭头所指代码颠倒顺序，会造成s的next指针指向结点本身（即图中的绿色箭头指向结点本身），从而使链表断链。</p><p><strong>插在表中：</strong></p><p><img src="https://i.loli.net/2021/10/02/WSbpvEXFNwJKc7M.png" alt="2021-10-02_162728.png"></p><p><strong>插在表尾（假如表长为4，插入到位序5）：</strong></p><p><img src="https://i.loli.net/2021/10/02/OLlVus6tafkqAJv.png" alt="2021-10-02_162844.png"></p><p><strong>插在超出表长的位置（假如表长为4，插入到位序6，此时会反馈i值非法的信息）：</strong></p><p><img src="https://i.loli.net/2021/10/02/5QcUKOVekyItNab.png" alt="2021-10-02_163010.png"></p></li><li><p>按位序插入（不带头结点）：</p><p>a. 思路</p><p>不存在头结点时，在插入第一位序结点的代码实现与带头结点时不同，要让新结点指向==原第一位序==结点，再让头指针指向新的结点。（即头指针的指向发生了改变，而带头结点的链表的头指针指向是不改变的）</p><p><img src="https://i.loli.net/2021/10/02/pGc9fUS6as5FDtQ.png" alt="2021-10-02_164732.png"></p><p>b. 具体代码实现</p><p><strong>插入表头：</strong></p><p><img src="https://i.loli.net/2021/10/02/Ma5N6OXBvueVRmf.png" alt="2021-10-02_164935.png"></p><p><strong>插入表中、表尾（即 1&lt; i &lt; n+2）：</strong></p><p><img src="https://i.loli.net/2021/10/02/ejvX3dZAPtDx6ub.png" alt="2021-10-02_165040.png"></p></li><li><p>指定结点的后插操作</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后插操作：在p结点之后插入元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InserNextNode</span><span class="params">(LNode *p, ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>(s == <span class="literal">NULL</span>)<span class="comment">//有些情况下内存可能分配失败（如内存不足）</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://i.loli.net/2021/10/20/P8fsY47BAqEZTNW.png" alt="2021-10-20_090647.png"></p><p>对于单链表给定的一个结点来说，知道了这个结点的指针，那后续元素的地址就是可知的了，而之前的元素是不知道的。</p><p><img src="https://i.loli.net/2021/10/20/WnVBPwDrqM2ezi1.png" alt="2021-10-20_094202.png"></p></li><li><p>指定结点的前插操作</p><p>当前插操作时，由于不知道给定结点前一个元素的地址，所以没办法插入。</p><p><img src="https://i.loli.net/2021/10/20/Ly6Ospx2gqUMQB9.png" alt="2021-10-20_100849.png"></p><p>一共有两种思路：</p><ol><li>传入头指针，然后遍历找到给定结点前一个元素，再在这个元素后面后插要插入的元素</li></ol><p><img src="https://i.loli.net/2021/10/20/qTXhHA1ILZgBG5n.png" alt="2021-10-20_101257.png"></p><ol start="2"><li><p>先申请一个新结点，然后将这个结点作为给定结点的后继结点插入进去，然后将给定结点所存储的信息给申请的新结点，然后将要插入的元素的信息给到给定结点（本版本申请的新结点是内容是空的，王道版本是直接在要插入元素的结点上进行操作）</p><p><img src="https://i.loli.net/2021/10/20/hxAkX2YPm5JWQey.png" alt="2021-10-20_102304.png"></p><p>王道版：</p><p><img src="https://i.loli.net/2021/10/20/P3O9N2R5wxb7TvB.png" alt="2021-10-20_103103.png"></p></li></ol></li></ul></li><li><p>删除</p><ul><li><p>按位序删除（带头结点）</p><blockquote><p>listDelete(&amp;L, i, &amp;e): 删除操作。删除表L中<strong>第i个位置</strong>(找到第i-1个结点，将其指针指向i+1个结点，并释放第i个结点)的元素，并用e返回删除元素的值。</p></blockquote><p><img src="https://i.loli.net/2021/10/20/gkHehMDLRmTWbt9.png" alt="2021-10-20_104142.png"></p><p><img src="https://i.loli.net/2021/10/20/AhsmEVJciFU5Q36.png" alt="2021-10-20_105421.png"></p></li><li><p>指定结点的删除</p><p><img src="https://i.loli.net/2021/10/20/lPiBAk65u3C8hbK.png" alt="2021-10-20_110525.png"></p><p><img src="https://i.loli.net/2021/10/20/wuUgY9CXBIfORVF.png" alt="2021-10-20_110856.png"></p><p>极限情况：单链表当要删除的结点是最后的一个结点，只能从表头开始依次寻找p的前驱</p><p><img src="https://i.loli.net/2021/10/20/KnsCid13gUMrG82.png" alt="2021-10-20_111422.png"></p></li></ul></li></ul></li></ul><p><strong>本小节思维导图：</strong></p><p><img src="https://i.loli.net/2021/10/20/87pFIc53VPLaTEQ.png" alt="2021-10-20_114006.png"></p><ul><li><p>单链表的查找（只讨论“带头结点”的情况）</p><ul><li><p>按位查找</p><p>GetElem(L,i): 按位查找操作。获取表L中第i个位置的元素的值。</p><p><img src="https://i.loli.net/2021/10/21/hP8tzSZurYxegdj.png" alt="2021-10-21_095509.png"></p><p>​<strong>注：i=0，把头结点看作是第0个结点；只要判断p返回值是否是NULL，就可以知道本次按位查找是否执行成功了；按位查找的平均时间复杂度是O(n)</strong></p><p><code>体会下图两种代码写法的不同：</code></p><p><img src="https://i.loli.net/2021/10/21/Wax8nu4kyG23moX.png" alt="2021-10-21_102235.png"></p></li><li><p>按值查找</p><p>LocateElem(L,e): 按值查找操作。在表L中查找具有给定关键字值的元素。</p><p><img src="https://i.loli.net/2021/10/21/Ma29qkov1OTnrNc.png" alt="2021-10-21_103444.png"></p></li></ul></li><li><p>求表的长度</p><p><img src="https://i.loli.net/2021/10/21/Hod4mfhwn9Xs5LE.png" alt="2021-10-21_104821.png"></p></li></ul><p><strong>本小节思维导图：</strong></p><p><img src="https://i.loli.net/2021/10/21/2ONMSkC1uhwblIs.png" alt="2021-10-21_105031.png"></p><ul><li><p>单链表的建立（带头结点的情况）</p><ul><li><p>尾插法</p><p><code>定义一个单链表并初始化：</code><img src="https://i.loli.net/2021/10/22/svj7ZK4mOiYTAaJ.png" alt="2021-10-22_155125.png"></p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型</span></span><br><span class="line">    ElemType data;<span class="comment">//每个结点存放一个数据元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向的下一个结点</span></span><br><span class="line">&#125;LNode, *LinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化一个单链表（带头结点）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (LNode *)<span class="built_in">malloc</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(LNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    LinkList L;<span class="comment">//声明一个指向单链表的指针</span></span><br><span class="line">    <span class="comment">//初始化一个空表</span></span><br><span class="line">    <span class="built_in">InitList</span>(L);</span><br><span class="line">    <span class="comment">//......后续代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>用这种每插入一个元素都要重新遍历到表尾再插新元素的方式时间复杂度较高：</code></p><p><img src="https://i.loli.net/2021/10/22/GiSruCZH9P1zMdO.png" alt="2021-10-22_160214.png"></p><p><code>通过设置一个表尾指针，直接在表尾插入新元素降低时间复杂度：</code><img src="https://i.loli.net/2021/10/22/wG8K6RL2VtPlrih.png" alt="2021-10-22_164140.png" style="zoom:67%;" /></p><p>​<code>回忆后插操作：</code></p><p><img src="https://i.loli.net/2021/10/22/SvJxOrkgDGfnVoB.png" alt="2021-10-22_164336.png"></p><p><code>王道书上的尾插法(使用表尾指针)：</code></p><p><img src="https://i.loli.net/2021/10/22/Wnrm6yG1LtUYOQf.png" alt="2021-10-22_165612.png"></p></li><li><p>头插法</p><p>​思路：</p><p><img src="https://i.loli.net/2021/10/22/nJBRhIG6Ya4QxWE.png" alt="2021-10-22_170440.png"></p><p>​具体实现：</p><p><img src="https://i.loli.net/2021/10/22/D8LlTHorybGgaXO.png" alt="2021-10-22_173144.png"></p><p>​<strong>链表的逆置（重要）</strong>：</p><p>​<img src="https://i.loli.net/2021/10/22/7zb1MXZRy4WQn9t.png" alt="2021-10-22_174728.png" style="zoom:80%;" /></p><p>​ 头插法表现出来的顺序是元素输入顺序的逆序：如果给定一个链表L，让求这个链表的逆置可以用头插法解决。</p><ol><li>用一个指针按顺序扫描原来的链表取得各个元素，然后建立一个新链表用头插法将这些元素存进去就可完成链表L的逆置。</li><li>可以直接依次取原链表L的各个元素，再将各个元素用头插法再插回链表L的头结点之后（这种方法不用建立新链表，原地逆置链表L）</li></ol></li></ul></li></ul><p><strong>本小节总结：</strong></p><img src="https://i.loli.net/2021/10/22/dxvwuh3EGjsiZra.png" alt="2021-10-22_180512.png" style="zoom:70%;" /><h3 id="2-3-3-双链表">2.3.3 双链表</h3><ul><li><p>双链表和单链表的比较</p><p><img src="https://i.loli.net/2021/10/22/lJjRp6csbPI2tv7.png" alt="2021-10-22_181757.png"></p></li><li><p>双链表的初始化（带头结点）</p><p><img src="https://i.loli.net/2021/10/22/WArn1GglTvCLtyK.png" alt="2021-10-22_182155.png"></p></li><li><p>双链表的插入</p><p><img src="https://i.loli.net/2021/10/22/kdQe3Ro6lXqwysf.gif" alt="2021-10-22_191635.gif"></p><p>但是当p结点刚好是双链表的最后一个结点，p–&gt;next–&gt;prior = s是错误的，因为p–&gt;next = NULL，无法再指向prior。</p><p><img src="https://i.loli.net/2021/10/22/Jbj4H98BTYWGVQE.png" alt="2021-10-22_200108.png"></p><p>对于上述问题可以写更严谨的代码如下图：</p><p><img src="https://i.loli.net/2021/10/22/ZvsVhJm3w8x7I6O.png" alt="2021-10-22_200905.png"></p></li><li><p>双链表的删除和销毁</p><p><img src="https://i.loli.net/2021/10/23/HhJfCVLtXBE3QqU.gif" alt="2021-10-22_231821.gif"></p><p>**红色错号解读：**但是当p结点刚好是双链表的最后一个结点，q–&gt;next–&gt;prior = p是错误的，因为q–&gt;next = NULL，无法再指向prior。</p></li><li><p>双链表的遍历</p><p><img src="https://i.loli.net/2021/10/23/G2vnXQ6zTeflujy.png" alt="2021-10-23_114050.png"></p></li></ul><p><strong>本小结思维导图：</strong></p><p><img src="https://i.loli.net/2021/10/23/6drDVpZaYOfni92.png" alt="2021-10-23_175654.png"></p><h3 id="2-3-4-循环链表">2.3.4 循环链表</h3><ul><li><p>循环单链表</p><p>单链表与循环单链表的区别：</p><p><img src="https://i.loli.net/2021/10/23/dzNGrps6aLmuJUi.png" alt="2021-10-23_191145.png"></p><p><img src="https://i.loli.net/2021/10/23/nKWL5uRfNJbh8eG.png" alt="2021-10-23_194607.png"></p><p>循环单链表的初始化、判空、判结点是否为表尾结点：</p><p><img src="https://i.loli.net/2021/10/23/aPGWyw7H1NhFkCu.png" alt="2021-10-23_191658.png"></p><p>循环单链表的操作技巧：</p><p><img src="https://i.loli.net/2021/10/23/2YMtrHlaxuFJnSb.png" alt="2021-10-23_194934.png"></p></li><li><p>循环双链表</p><p>双链表与循环双链表的区别：</p><p><img src="https://i.loli.net/2021/10/23/OXMNzJZjmhx24v1.png" alt="2021-10-23_195929.png"></p><p>循环双链表的初始化、判空、判结点是否为表尾结点：</p><p><img src="https://i.loli.net/2021/10/23/kJwjt8XEvDNs7uA.png" alt="2021-10-23_200154.png"></p><p>循环双链表的插入：</p><p><img src="https://i.loli.net/2021/10/23/7YoxOUaPleqANWM.png" alt="2021-10-23_201056.png"></p><p>循环双链表的删除：</p><p><img src="https://i.loli.net/2021/10/23/zCwTgrDFj9pcO8i.png" alt="2021-10-23_201117.png"></p></li></ul><p><strong>本小结思维导图：</strong></p><p><img src="https://i.loli.net/2021/10/23/uxpdKFGS34hAL1c.png" alt="2021-10-23_201129.png"></p><h3 id="2-3-5-静态链表">2.3.5 静态链表</h3><ul><li><p>静态链表概念</p><p><img src="https://i.loli.net/2021/10/26/OAV2fZjugTGXsDq.png" alt="2021-10-25_223852.png"></p></li><li><p>静态链表定义（两种不同的写法）</p><p><img src="https://i.loli.net/2021/10/26/IdMNxmsrJLeuvPR.png" alt="2021-10-25_223906.png"></p><p><img src="https://i.loli.net/2021/10/26/AFsIN8XKpPzx7Jb.png" alt="2021-10-25_223916.png"></p><p>​验证不同写法的结果是否一致：</p><p><img src="https://i.loli.net/2021/10/26/vOmgq4aXlRWMVez.png" alt="2021-10-25_223928.png"></p></li><li><p>初始化静态链表</p><p><img src="https://i.loli.net/2021/10/26/elmc62n1QgKw9CI.png" alt="2021-10-25_223943.png"></p></li><li><p>静态链表的查找、插入与删除</p><p><img src="https://i.loli.net/2021/10/26/LaeZG4EPmXYvyi8.png" alt="2021-10-25_223957.png"></p></li><li><p>总结归纳</p><p><img src="https://i.loli.net/2021/10/26/GJCpbuRjKOnHVB7.png" alt="2021-10-25_224008.png"></p></li></ul><h2 id="2-4-本章总结（顺序表和链表的对比）">2.4 本章总结（顺序表和链表的对比）</h2><h3 id="2-4-1-三个维度对比">2.4.1 三个维度对比</h3><ul><li>逻辑结构</li><li>物理结构/存储结构</li><li>数据的运算/基本操作</li></ul><blockquote><p>在什么情境下选择谁更好一些呢？</p></blockquote><h3 id="2-4-2-逻辑结构">2.4.2 逻辑结构</h3><blockquote><p>都属于线性表，都是线性结构</p></blockquote><img src="https://i.loli.net/2021/10/26/6bLZ9cSjvgKXwPy.png" alt="2021-10-26_142310.png" style="zoom:67%;" /><h3 id="2-4-3-存储结构">2.4.3 存储结构</h3><p><img src="https://i.loli.net/2021/10/26/8n6xGObfgARYiLT.png" alt="2021-10-26_151027.png"></p><h3 id="2-4-4-基本操作（创销、增删改查）">2.4.4 基本操作（创销、增删改查）</h3><ul><li><p>创：</p><p><img src="https://i.loli.net/2021/10/26/2gAWxt5ha8lGfFu.png" alt="2021-10-26_153520.png"></p></li><li><p>销：</p><p><img src="https://i.loli.net/2021/10/26/uyOo3PsVUckwpWh.png" alt="2021-10-26_153542.png"></p></li><li><p>增删：</p><p><img src="https://i.loli.net/2021/10/26/HlIuprL1CVafDg3.png" alt="2021-10-26_153552.png"></p></li><li><p>查：</p><p><img src="https://i.loli.net/2021/10/26/fNytlH7YCduzOXA.png" alt="2021-10-26_153600.png"></p></li><li><p>总结：</p><p><img src="https://i.loli.net/2021/10/26/yDMXqA18uCtE7bJ.png" alt="2021-10-26_153617.png"></p></li><li><p>顺序表和链表对比问答题思路：</p><p><img src="https://i.loli.net/2021/10/26/KFm5jHv4fq1MPw2.png" alt="2021-10-26_153628.png"></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
            <tag> 王道计算机 </tag>
            
            <tag> 考研 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
